{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","emo","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","resp","output","data","style","color","fontSize","background","catch","error","console","log","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cfd6ae93.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div className=\"mt-1 ml-1 mr-1\">\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n              // Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\n              Object.entries(this.props.emotions).map((emo) => {\n                return (\n                  <tr>\n                    <td>{emo[0]}</td><td>{emo[1]}</td>\n                  </tr>\n                );\n              })\n            }\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    \n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n    mode: \"text\",\n    sentimentOutput:[],\n    sentiment:true\n  }\n\n  renderTextArea = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"2\" cols=\"90\" id=\"textinput\"/>,\n                     mode: \"text\",\n                     sentimentOutput:[],\n                     sentiment:true\n                    })\n    }\n  }\n\n  renderTextBox = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n                     mode: \"url\",\n                     sentimentOutput:[],\n                     sentiment:true\n                    })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = \".\";\n\n    if (this.state.mode === \"url\") {\n      url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n    }\n    else {\n      url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n    }\n\n    ret = axios.get(url);\n    ret.then((resp) => {\n      // Include code here to check the sentiment and format the data accordingly\n      let output = \"\";\n      if(resp.data === \"positive\") {\n        output = <div style={{color:\"darkgreen\", fontSize:18}}>{resp.data}</div>\n      }\n      else if (resp.data === \"negative\") {\n        output = <div style={{color:\"darkred\", fontSize:18}}>{resp.data}</div>\n      }\n      else {\n        // neutral\n        output = <div style={{color:\"lightyellow\", background:\"black\", fontSize:18}}>{resp.data}</div>\n      }\n\n      this.setState({sentimentOutput: output});\n    }).catch(error => {\n      console.log(\"error in resp: \", error)\n      error = <div>{{error}}</div>;\n      this.setState({sentimentOutput: error});\n    });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = \".\";\n\n    if (this.state.mode === \"url\") {\n      url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n    }\n    else {\n      url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n    }\n\n    ret = axios.get(url);\n\n    ret.then((resp) => {\n      this.setState({sentimentOutput:<EmotionTable emotions={resp.data}/>});\n    }).catch(error => {\n      console.log(\"error in resp: \", error)\n      error = <div>{{error}}</div>;\n      this.setState({sentimentOutput: error});\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n        <br /><br />\n        {this.state.innercomp}\n        <br />\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br />\n        {this.state.sentimentOutput}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}